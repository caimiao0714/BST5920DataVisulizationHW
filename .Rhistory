node [shape = circle
fontname = Arial]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'this is a label!'
fontname = Times New Roman]
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'this is a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
mermaid("
graph LR
A --> B
", height = 200)
require("DiagrammeR")
example = grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(DiagrammeRsvg)
install.packages("DiagrammeRsvg")
?export_graph()
export_graph(example, "example.svg")
")
export_graph(example, "example.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
export_graph("example.svg")
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'))
?export_svg
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'), "zz.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(magrittr)
") %>%
export_graph(
") %>%
export_graph(
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
create_graph() %>%
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
xs = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
library(MASS)
nobs = 1000
r1 = 0.3
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
xs = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
library(tidyverse)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
View(dat)
library(MASS)
library(tidyverse)
nobs = 1000
r1 = 0.3
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = 1*X1 + X*X2 + rnorm(nobs, 0, 1) )
dat = mutate(dat, Y = 1*X1 + 2*X2 + rnorm(nobs, 0, 1) )
ggplot(dat, aes(x = X1, y = Y)) + geom_point()
lmfit = lm(Y ~ X1 + X2, data = dat)
summary(lmfit)$coefficients
lmfitf = lm(Y ~ X1, data = dat)
summary(lmfitf)$coefficients
ggplot(dat, aes(x = X1, y = Y)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
summary(lmfitT)$coefficients[1]
lmfitT = lm(Y ~ X1 + X2, data = dat)
summary(lmfitT)$coefficients[1]
summary(lmfitT)$coefficients[1,]
summary(lmfitT)$coefficients[,1]
(coeffF = summary(lmfitF)$coefficients[,1])
lmfitF = lm(Y ~ X1, data = dat)
(coeffF = summary(lmfitF)$coefficients[,1])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT)
lmfitT = lm(Y ~ X1 + X2, data = dat)
(coeffT = summary(lmfitT)$coefficients[,1])
lmfitF = lm(Y ~ X1, data = dat)
(coeffF = summary(lmfitF)$coefficients[,1])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT)
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT[1], coeffT[2])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = coeffT[1], slope = coeffT[2])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
ggplot(dat, aes(x = X1, y = Y, group = X2)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
ggplot(dat, aes(x = X1, y = Y, color = X2)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
print(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
# increase the number of obs
bias = vector(length = 10L)
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
for (i in (1:10)*1000){
(onefunction(nobs = i))
}
for (i in (1:10)*1000){
onefunction(nobs = i) %>% print()
}
for (i in (1:10)*1000){
onefunction(nobs = i) %>% unname() %>% print()
}
bias = vector(length = 10L)
for (i in (1:10)*1000){
bias[i/1000] = onefunction(nobs = i)
}
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n y = bias)) + geom_line()
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:10)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:20)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:20)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(1 - coeffF[2])
}
# increase the number of obs
bias = vector(length = 20L)
for (i in (1:20)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:20)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:100)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:100)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(nobs = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(r1 = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
for (i in (1:100)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(1 - coeffF[2])
}
data.frame(n = (1:100)*1000, bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase sample size")
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(r1 = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
data.frame(r = (0:99)/100, bias = bias) %>%
ggplot(aes(x = r, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 1000L)
for (i in (0:999)/1000){
bias[i*1000 + 1] = abs(onefunction(r1 = i))
}
data.frame(r = (0:999)/1000, bias = bias) %>%
ggplot(aes(x = r, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 100L)
for (i in 1:100){
bias[i] = abs(onefunction(b2 = i))
}
data.frame(b2 = 1:100, bias = bias) %>%
ggplot(aes(x = b2, y = bias)) + geom_line() +
ggtitle("Increase b2")
bias = vector(length = 100L)
for (i in 1:100){
bias[i] = abs(onefunction(b1 = i, b2 = 1))
}
data.frame(b1 = 1:100, bias = bias) %>%
ggplot(aes(x = b1, y = bias)) + geom_line() +
ggtitle("Increase b1")
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffF[2])
}
