node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(DiagrammeRsvg)
install.packages("DiagrammeRsvg")
?export_graph()
export_graph(example, "example.svg")
")
export_graph(example, "example.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
export_graph("example.svg")
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'))
?export_svg
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'), "zz.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(magrittr)
") %>%
export_graph(
") %>%
export_graph(
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
create_graph() %>%
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
xs = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
library(MASS)
nobs = 1000
r1 = 0.3
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
xs = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
library(tidyverse)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
View(dat)
library(MASS)
library(tidyverse)
nobs = 1000
r1 = 0.3
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = 1*X1 + X*X2 + rnorm(nobs, 0, 1) )
dat = mutate(dat, Y = 1*X1 + 2*X2 + rnorm(nobs, 0, 1) )
ggplot(dat, aes(x = X1, y = Y)) + geom_point()
lmfit = lm(Y ~ X1 + X2, data = dat)
summary(lmfit)$coefficients
lmfitf = lm(Y ~ X1, data = dat)
summary(lmfitf)$coefficients
ggplot(dat, aes(x = X1, y = Y)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
summary(lmfitT)$coefficients[1]
lmfitT = lm(Y ~ X1 + X2, data = dat)
summary(lmfitT)$coefficients[1]
summary(lmfitT)$coefficients[1,]
summary(lmfitT)$coefficients[,1]
(coeffF = summary(lmfitF)$coefficients[,1])
lmfitF = lm(Y ~ X1, data = dat)
(coeffF = summary(lmfitF)$coefficients[,1])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT)
lmfitT = lm(Y ~ X1 + X2, data = dat)
(coeffT = summary(lmfitT)$coefficients[,1])
lmfitF = lm(Y ~ X1, data = dat)
(coeffF = summary(lmfitF)$coefficients[,1])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT)
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(coeffT[1], coeffT[2])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = coeffT[1], slope = coeffT[2])
ggplot(dat, aes(x = X1, y = Y)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
ggplot(dat, aes(x = X1, y = Y, group = X2)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
ggplot(dat, aes(x = X1, y = Y, color = X2)) + geom_point() +
geom_abline(intercept = coeffT[1], slope = coeffT[2]) +
geom_abline(intercept = coeffF[1], slope = coeffF[2])
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=1000, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
print(coeffT[2] - coeffF[2])
}
# increase the number of obs
for (i in (1:10)*1000){
onefunction(nobs = i)
}
# increase the number of obs
bias = vector(length = 10L)
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffT[2] - coeffF[2])
}
for (i in (1:10)*1000){
(onefunction(nobs = i))
}
for (i in (1:10)*1000){
onefunction(nobs = i) %>% print()
}
for (i in (1:10)*1000){
onefunction(nobs = i) %>% unname() %>% print()
}
bias = vector(length = 10L)
for (i in (1:10)*1000){
bias[i/1000] = onefunction(nobs = i)
}
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n y = bias)) + geom_line()
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:10)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:10)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:20)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:20)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(1 - coeffF[2])
}
# increase the number of obs
bias = vector(length = 20L)
for (i in (1:20)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:20)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
for (i in (1:100)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
data.frame(n = (1:100)*1000, bias = bias) %>% ggplot(aes(x = n, y = bias)) + geom_line()
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(nobs = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(r1 = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
for (i in (1:100)*1000){
bias[i/1000] = abs(onefunction(nobs = i))
}
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(1 - coeffF[2])
}
data.frame(n = (1:100)*1000, bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase sample size")
# increase the number of obs
bias = vector(length = 100L)
for (i in (0:99)/100){
bias[i*100 + 1] = abs(onefunction(r1 = i))
}
data.frame(n = , bias = bias) %>%
ggplot(aes(x = n, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
data.frame(r = (0:99)/100, bias = bias) %>%
ggplot(aes(x = r, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 1000L)
for (i in (0:999)/1000){
bias[i*1000 + 1] = abs(onefunction(r1 = i))
}
data.frame(r = (0:999)/1000, bias = bias) %>%
ggplot(aes(x = r, y = bias)) + geom_line() +
ggtitle("Increase correlation coefficient")
# increase the number of obs
bias = vector(length = 100L)
for (i in 1:100){
bias[i] = abs(onefunction(b2 = i))
}
data.frame(b2 = 1:100, bias = bias) %>%
ggplot(aes(x = b2, y = bias)) + geom_line() +
ggtitle("Increase b2")
bias = vector(length = 100L)
for (i in 1:100){
bias[i] = abs(onefunction(b1 = i, b2 = 1))
}
data.frame(b1 = 1:100, bias = bias) %>%
ggplot(aes(x = b1, y = bias)) + geom_line() +
ggtitle("Increase b1")
##### function ######
onefunction = function(nobs = 1000, r1 = 0.3, b1 = 1, b2 = 1){
mt = matrix(c(1, r1, r1, 1),
nrow = 2, ncol = 2)
dat = data.frame(mvrnorm(n=nobs, mu=rep(2,2), Sigma = mt))
dat = mutate(dat, Y = b1*X1 + b2*X2 + rnorm(nobs, 0, 1) )
lmfitT = lm(Y ~ X1 + X2, data = dat)
coeffT = summary(lmfitT)$coefficients[,1]
lmfitF = lm(Y ~ X1, data = dat)
coeffF = summary(lmfitF)$coefficients[,1]
return(coeffF[2])
}
install.packages("rDEA")
install.packages("Benchmarking")
require(Benchmarking)
install.packages("microbenchmark")
library(microbenchmark)
set.seed(666)
microbenchmark( t0 = rnorm(100), t1 = rnorm(10000) )
version
version()
colon
?colon
install.packages("benchmarkme")
library("benchmarkme")
res = benchmark_std(runs = 3)
plot(res)
res = benchmark_io(runs = 1, size = 50)
res = benchmark_io(runs = 1, size = 5)
plot(res)
names(mtcars)
require(dplyr)
mtcars %>% select(names(mtcars)[1:5])
mtcars %>% select("mpg")
zz = as.matrix(mtcars)
zz = as.matrix(mtcars)
microbenchmark(mtcars[, 1], zz[, 1])
?microbenchmark
microbenchmark::microbenchmark(mtcars[1, ], zz[1, ])
get_cpu()
get_ram()
library("parallel")
detectCores()
library("parallel")
parApply(cl, mtcars)
mtcars
copiesCore = 4
cl = makeCluster(copiesCore)
parApply(cl, mtcars[,mpg], 1, median)
parApply(cl, mtcars$mpg, 1, median)
mtcars$mpg
parApply(cl, mtcars$mpg, 2, median)
stopCluster(cl)
parApply(cl, mtcars[,1:5], 2, median)
library("parallel")
copiesCore = 4
cl = makeCluster(copiesCore)
parApply(cl, mtcars[,1:5], 2, median)
stopCluster(cl)
install.packages("lavaan")
# Load the lavaan library
library(lavaan)
# Look at the dataset
data(HolzingerSwineford1939)
head(HolzingerSwineford1939[ , 7:15])
# Define your model specification
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
library(lavaan)
# Look at the dataset
data(PoliticalDemocracy)
head(PoliticalDemocracy)
# Define your model specification
politics.model <- 'poldemo60 =~ y1 + y2 + y3 + y4'
# Load the lavaan library
library(lavaan)
# Load the dataset and define model
data(HolzingerSwineford1939)
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
# Analyze the model with cfa()
text.fit <- cfa(
model = text.model,
data = HolzingerSwineford1939
)
# Summarize the model
summary(text.fit)
summary(text.fit, standardized = TRUE)
summary(text.fit, standardized = TRUE, fit.measures = TRUE)
?parse_character
require(dplyr)
?parse_character
??parse_character
# First, re-run the model to re-load it
outLmer <- lmer( response ~ x + (1|group), data = multIntDemo)
# Second, save the model predictions as a column to the original data.frame
multIntDemo$lmerPredict <- predict(outLmer)
# Third, plot the original data
ggmultIntgDemo2 <- ggplot( multIntDemo, aes(x = x, y = response) ) +
geom_point(aes(color = group))+
theme_minimal() +
scale_color_manual(values = c("blue", "black", "red")) +
geom_abline(data = multIntDemo,
aes(intercept = intercept, slope = slope, color = group))
# Fourth, use the predicted values to plot the new outputs
ggmultIntgDemo2 +
geom_line( data =  multIntDemo,
aes(x = x, y = lmerPredict, color = group),
linetype = 2)
require(ggplot2)
require(lme4)
require(ggplot2)
require(lme4)
# First, re-run the model to re-load it
outLmer <- lmer( response ~ x + (1|group), data = multIntDemo)
# Second, save the model predictions as a column to the original data.frame
multIntDemo$lmerPredict <- predict(outLmer)
# Third, plot the original data
ggmultIntgDemo2 <- ggplot( multIntDemo, aes(x = x, y = response) ) +
geom_point(aes(color = group))+
theme_minimal() +
scale_color_manual(values = c("blue", "black", "red")) +
geom_abline(data = multIntDemo,
aes(intercept = intercept, slope = slope, color = group))
# Fourth, use the predicted values to plot the new outputs
ggmultIntgDemo2 +
geom_line( data =  multIntDemo,
aes(x = x, y = lmerPredict, color = group),
linetype = 2)
?extractAndPlotOutput
?extractAndPlot
??extractAndPlot
require(lme4)
fm1 <- lmer(reaction ~ days + (days | subject), sleepstudy)
?sleepstudy
fm1 <- lmer(reaction ~ days + (days | subject), data = sleepstudy)
names(sleepstudy) <- tolower(names(sleepstudy))
fm1 <- lmer(reaction ~ days + (days | subject), data = sleepstudy)
summary(fm1)
ranef(fm1)
library(broom)
tidy(fm1)
tidy(fm1, "ran_modes")
summary(fm1)
tidy(fm1, "ran_modes")
ranef(fm1)
tidy(fm1)
fixef(fm1)
fm1 <- lmer(reaction ~ days + (days | subject), data = sleepstudy)
summary(fm1)
fm2 <- lmer(reaction ~ (days | subject), data = sleepstudy)
summary(fm2)
tidy(fm1, "ran_modes")
tidy(fm2, "ran_modes")
tidy(fm1)
tidy(fm2)
tidy(fm2, "ran_modes")
ranef(fm2)
