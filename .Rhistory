dat %>%
ggplot(aes(x = Year, y = Y, group = Group, color = factor(Tr))) +
geom_line(alpha = 0.3) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw()
didfit = lm(Y ~ Tr + Post + Tr*Post + factor(Year), data = dat)
summary(didfit)
summary(didfit)$coefficients
names(summary(didfit)$coefficients)
rownames(summary(didfit)$coefficients)
summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")]
namerow = rownames(summary(didfit)$coefficients)
summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")]
round(summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")], 2)
summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")]
namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")]
namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post")
summary(didfit)$coefficients
round(summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post"), 1], 2)
c(b0, b1, b2, b3)
set.seed(666)
nunits = 400
nyear = 10
b3 = 3
b1 = 2
b2 = 1
b0 = 0
Group = rep(1:nunits, each = nyear)
Year = rep(2007:(2007+nyear-1), times = nunits)
Tr = rep(sample(0:1, nunits, replace = TRUE), each = nyear)
Post = ifelse(Year<2013, 0, 1)
byear = rnorm(nyear, 0, 1)
yyear = model.matrix( ~ YEAR-1, data=data.frame(YEAR = factor(Year))) %*% byear
Y = b0 + b1*Tr + b2*Post + b3*Tr*Post + yyear + rnorm(nunits*nyear, 0, 1)
dat = data.frame(Y, Group, Tr, Post, Year)
require(tidyverse)
dat %>%
ggplot(aes(x = Year, y = Y, group = Group, color = factor(Tr))) +
geom_line(alpha = 0.3) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw()
byear
set.seed(666)
nunits = 400
nyear = 10
b3 = 3
b1 = 2
b2 = 1
b0 = 0
Group = rep(1:nunits, each = nyear)
Year = rep(2007:(2007+nyear-1), times = nunits)
Tr = rep(sample(0:1, nunits, replace = TRUE), each = nyear)
Post = ifelse(Year<2013, 0, 1)
byear = c(0, rnorm(nyear-1, 0, 1))
yyear = model.matrix( ~ YEAR-1, data=data.frame(YEAR = factor(Year))) %*% byear
Y = b0 + b1*Tr + b2*Post + b3*Tr*Post + yyear + rnorm(nunits*nyear, 0, 1)
dat = data.frame(Y, Group, Tr, Post, Year)
require(tidyverse)
dat %>%
ggplot(aes(x = Year, y = Y, group = Group, color = factor(Tr))) +
geom_line(alpha = 0.3) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw()
didfit = lm(Y ~ Tr + Post + Tr*Post + factor(Year), data = dat)
summary(didfit)
namerow = rownames(summary(didfit)$coefficients)
round(summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post"), 1], 2)
c(b0, b1, b2, b3)
set.seed(666)
nunits = 400
nyear = 10
b0 = 0
b1 = 1
b2 = 2
b3 = 3
Group = rep(1:nunits, each = nyear)
Year = rep(2007:(2007+nyear-1), times = nunits)
Tr = rep(sample(0:1, nunits, replace = TRUE), each = nyear)
Post = ifelse(Year<2013, 0, 1)
byear = c(0, rnorm(nyear-1, 0, 1))
yyear = model.matrix( ~ YEAR-1, data=data.frame(YEAR = factor(Year))) %*% byear
Y = b0 + b1*Tr + b2*Post + b3*Tr*Post + yyear + rnorm(nunits*nyear, 0, 1)
dat = data.frame(Y, Group, Tr, Post, Year)
require(tidyverse)
dat %>%
ggplot(aes(x = Year, y = Y, group = Group, color = factor(Tr))) +
geom_line(alpha = 0.3) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw()
set.seed(666)
nunits = 400
nyear = 10
b0 = 1
b1 = 2
b2 = 3
b3 = 4
Group = rep(1:nunits, each = nyear)
Year = rep(2007:(2007+nyear-1), times = nunits)
Tr = rep(sample(0:1, nunits, replace = TRUE), each = nyear)
Post = ifelse(Year<2013, 0, 1)
byear = c(0, rnorm(nyear-1, 0, 1))
yyear = model.matrix( ~ YEAR-1, data=data.frame(YEAR = factor(Year))) %*% byear
Y = b0 + b1*Tr + b2*Post + b3*Tr*Post + yyear + rnorm(nunits*nyear, 0, 1)
dat = data.frame(Y, Group, Tr, Post, Year)
require(tidyverse)
dat %>%
ggplot(aes(x = Year, y = Y, group = Group, color = factor(Tr))) +
geom_line(alpha = 0.3) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw()
didfit = lm(Y ~ Tr + Post + Tr*Post + factor(Year), data = dat)
summary(didfit)
namerow = rownames(summary(didfit)$coefficients)
round(summary(didfit)$coefficients[namerow %in% c("(Intercept)", "Tr", "Post", "Tr:Post"), 1], 2)
c(b0, b1, b2, b3)
rm(list = ls())
install.packages("diagrammeR")
install.packages("DiagrammeR")
require("DiagrammeR")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.1]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.8]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'this is a label!'
fontname = Times New Roman]
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'this is a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require("DiagrammeR")
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
mermaid("
graph LR
A --> B
", height = 200)
require("DiagrammeR")
example = grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(DiagrammeRsvg)
install.packages("DiagrammeRsvg")
?export_graph()
export_graph(example, "example.svg")
")
export_graph(example, "example.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
export_graph("example.svg")
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'))
?export_svg
export_svg(grViz('digraph{a->b; c->a; c->b; c->d;}'), "zz.svg")
require(DiagrammeR)
require(DiagrammeRsvg)
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
")
require(magrittr)
") %>%
export_graph(
") %>%
export_graph(
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
create_graph() %>%
grViz("
digraph boxes_and_circles {
# add note statement
node [shape = circle
fontname = Arial
penwidth = 2.0]
A; B; C; D; E; F
node [shape = box]
1; 2; 3; 4; 5; 6; 7; 8
# add edge statements
# edge [arrowhead = diamond]
A -> 1; B -> 2; B -> 3; B -> 4;
C -> A; 1 -> D; E -> A; 2 -> 4;
1 -> 5; 1 -> F; E -> 6; 4 -> 6;
5 -> 7; 6 -> 7; 3 -> 8[label = 'a label!'
fontname = Times]
# add a graph statement
graph [nodesep = 0.5]
}
") %>%
export_graph(
file_name = "graph.pdf",
title = "Simple Graph")
